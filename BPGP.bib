Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@misc{Scott,
author = {Scott, Robin},
title = {{stratzilla/connect-four: Connect Four using MiniMax Alpha-Beta Pruning}},
url = {https://github.com/stratzilla/connect-four},
urldate = {2021-06-21}
}
@misc{Luke1998ECJSoftware,
annote = {Available for free at http://cs.gmu.edu/{\$}{\~{}}{\$}eclab/projects/ecj/},
author = {Luke, Sean},
title = {{ECJ Evolutionary Computation Library}},
year = {1998}
}
@article{ONeill2001,
abstract = {We present grammatical evolution, an evolutionary algorithm that can evolve complete programs in an arbitrary language using a variable-length binary string. The binary genome determines which production rules in a Backus-Naur form grammar definition are used in a genotype-to-phenotype mapping process to a program. We demonstrate how expressions and programs of arbitrary complexity may be evolved and compare its performance to genetic programming.},
author = {O'Neill, Michael and Ryan, Conor},
doi = {10.1109/4235.942529},
issn = {1089778X},
journal = {IEEE Trans. Evol. Comput.},
keywords = {Automatic programming,Backus-Naur form,Degenerate code,Evolutionary algorithms,Neutral networks},
month = {aug},
number = {4},
pages = {349--358},
title = {{Grammatical evolution}},
volume = {5},
year = {2001}
}
@book{Allen2010,
author = {Allen, James Dow},
isbn = {1402756216},
publisher = {Puzzlewright},
title = {{The complete book of Connect 4 : history, strategy, puzzles}},
url = {https://archive.org/details/isbn{\_}9781402756214},
year = {2010}
}
@article{Petke2018,
abstract = {Genetic improvement (GI) uses automated search to find improved versions of existing software. We present a comprehensive survey of this nascent field of research with a focus on the core papers in the area published between 1995 and 2015. We identified core publications including empirical studies, 96{\%} of which use evolutionary algorithms (genetic programming in particular). Although we can trace the foundations of GI back to the origins of computer science itself, our analysis reveals a significant upsurge in activity since 2012. GI has resulted in dramatic performance improvements for a diverse set of properties such as execution time, energy and memory consumption, as well as results for fixing and extending existing system functionality. Moreover, we present examples of research work that lies on the boundary between GI and other areas, such as program transformation, approximate computing, and software repair, with the intention of encouraging further exchange of ideas between researchers in these fields.},
author = {Petke, Justyna and Haraldsson, Saemundur O. and Harman, Mark and Langdon, William B. and White, David R. and Woodward, John R.},
doi = {10.1109/TEVC.2017.2693219},
file = {:C$\backslash$:/Users/Zvika/Documents/Mendeley Desktop/Petke et al/IEEE Transactions on Evolutionary Computation/Petke et al. - 2018 - Genetic Improvement of Software A Comprehensive Survey.pdf:pdf},
issn = {1089778X},
journal = {IEEE Trans. Evol. Comput.},
keywords = {Genetic improvement (GI),survey},
month = {jun},
number = {3},
pages = {415--432},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Genetic Improvement of Software: A Comprehensive Survey}},
volume = {22},
year = {2018}
}
@unpublished{Sipper,
abstract = {Grant request for ISF},
author = {Sipper, Moshe and Elyasaf, Achiya},
file = {:C$\backslash$:/Users/Zvika/Documents/Mendeley Desktop/Sipper, Elyasaf/Unknown/Sipper, Elyasaf - Unknown - Source-Code Evolution Closing the Gap Towards the Evolution of Entire Programs.pdf:pdf},
keywords = {BP,BP{\_}GP,GP,ISF,grant},
pages = {15},
title = {{Source-Code Evolution: Closing the Gap Towards the Evolution of Entire Programs}}
}
@misc{Gymrek2009,
annote = {See also
https://web.mit.edu/sp.268/www/2010/connectFourSlides.pdf},
author = {Gymrek, Melissa and Li, Jing},
file = {:C$\backslash$:/Users/Zvika/Documents/Mendeley Desktop/Gymrek, Li/Unknown/Gymrek, Li - 2009 - Intro to A.I. Topics - Connect Four.pdf:pdf},
keywords = {Connect4,MIT},
mendeley-tags = {Connect4,MIT},
title = {{Intro to A.I. Topics - Connect Four}},
url = {http://web.mit.edu/sp.268/www/connectfour.pdf},
urldate = {2021-06-17},
year = {2009}
}
@incollection{Banzhaf2018,
abstract = {In this chapter we take a fresh look at the current
status of evolving computer code using Genetic
Programming methods. The emphasis is not so much on
what has been achieved in detail in the past few years,
but on the general research direction of code evolution
and its ramifications for GP. We begin with a quick
glance at the area of Search-based Software Engineering
(SBSE), discuss the history of GP as applied to code
evolution, consider various application scenarios, and
speculate on techniques that might lead to a scaling-up
of present-day approaches.},
author = {Banzhaf, Wolfgang},
doi = {10.1007/978-3-319-67997-6_6},
file = {:C$\backslash$:/Users/Zvika/Documents/Mendeley Desktop/Banzhaf/Unknown/Banzhaf - 2018 - Some Remarks on Code Evolution with Genetic Programming.pdf:pdf},
pages = {145--156},
publisher = {Springer, Cham},
title = {{Some Remarks on Code Evolution with Genetic Programming}},
url = {https://doi.org/10.1007/978-3-319-67997-6{\_}6},
year = {2018}
}
@techreport{Allis,
abstract = {A Shannon C-type strategy program, VICTOR, is written for Connect-Four, based on nine strategic rules. Each of these rules is proven to be correct, implying that conclusions made by VICTOR are correct. Using VICTOR, strategic rules where found which can be used by Black to at least draw the game, on each 7 × (2n) board, provided that White does not start at the middle column, as well as on any 6 × (2n) board. In combination with conspiracy-number search, search tables and depth-first search, VICTOR was able to show that White can win on the standard 7 × 6 board. Using a database of approximately half a million positions, VICTOR can play real time against opponents on the 7 × 6 board, always winning with White.},
author = {Allis, Victor},
file = {:C$\backslash$:/Users/Zvika/Documents/Mendeley Desktop/Allis/Unknown/Allis - Unknown - A Knowledge-based Approach of Connect-Four The Game is Solved White Wins.pdf:pdf},
title = {{A Knowledge-based Approach of Connect-Four The Game is Solved: White Wins}}
}
@misc{Tromp,
author = {Tromp, John},
title = {{John's Connect Four Playground}},
url = {https://tromp.github.io/c4/c4.html},
urldate = {2021-06-18}
}
@article{Elyasaf2020,
abstract = {Modern systems require programmers to develop code that dynamically adapts to different contexts, leading to the evolution of new context-oriented programming languages. These languages introduce new software-engineering challenges, such as: how to maintain and keep the separation of concerns of the codebase? how to model the changing behaviors? how to verify the system behavior? and more. This paper introduces Context-Oriented Behavioral Programming(COBP) - a novel paradigm for developing context-aware systems, centered on natural and incremental specification of context-dependent behaviors. As the name suggests, we combine behavioral-programming(BP) - a scenario-based modeling paradigm - with context idioms that explicitly specify when scenarios are relevant and what information they need. The core idea is to connect the behavioral model with a data model that represents the context, allowing an intuitive connection between the models via update and select queries. Combining behavioral-programming with context-oriented programming brings the best of the two worlds, solving issues that arise when using each of the approaches in separation. We begin with providing abstract semantics for COBP, laying the foundations for applying reasoning algorithms to context-aware behavioral programs. We then exemplify the semantics with formal specifications of systems, including a variant of Conway's Game of Life. Finally, we present a JavaScript-based implementation of the paradigm and provide two case studies of real-life context-aware systems (one in robotics and another in IoT) that were developed using this tool. Throughout the examples and case studies, we provide design patterns and a methodology for coping with the above challenges.},
archivePrefix = {arXiv},
arxivId = {2005.02373},
author = {Elyasaf, Achiya},
doi = {10.1016/j.infsof.2020.106504},
eprint = {2005.02373},
file = {:C$\backslash$:/Users/Zvika/Documents/Mendeley Desktop/Elyasaf/arXiv/Elyasaf - 2020 - Context-Oriented Behavioral Programming.pdf:pdf},
journal = {arXiv},
keywords = {Behavioral Programming,Context Awareness,Context-Oriented Behavioral Programming,Context-Oriented Programming,Programming Paradigm,Scenario-Based Programming},
month = {may},
publisher = {arXiv},
title = {{Context-Oriented Behavioral Programming}},
url = {http://arxiv.org/abs/2005.02373 http://dx.doi.org/10.1016/j.infsof.2020.106504},
year = {2020}
}
